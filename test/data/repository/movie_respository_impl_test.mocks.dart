// Mocks generated by Mockito 5.3.2 from annotations
// in movie_app/test/data/repository/movie_respository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:movie_app/modules/movies/data/cache/movies_cache_data_source.dart'
    as _i6;
import 'package:movie_app/modules/movies/data/remote/data_source/movies_remote_data_source.dart'
    as _i3;
import 'package:movie_app/modules/movies/domain/model/details/movie_details_model.dart'
    as _i2;
import 'package:movie_app/modules/movies/domain/model/movie/movie_model.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMovieDetailsModel_0 extends _i1.SmartFake
    implements _i2.MovieDetailsModel {
  _FakeMovieDetailsModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MoviesRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoviesRemoteDataSource extends _i1.Mock
    implements _i3.MoviesRemoteDataSource {
  MockMoviesRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.MovieModel>> getMoviesList() => (super.noSuchMethod(
        Invocation.method(
          #getMoviesList,
          [],
        ),
        returnValue: _i4.Future<List<_i5.MovieModel>>.value(<_i5.MovieModel>[]),
      ) as _i4.Future<List<_i5.MovieModel>>);
  @override
  _i4.Future<_i2.MovieDetailsModel> getMovieDetails(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieDetails,
          [id],
        ),
        returnValue:
            _i4.Future<_i2.MovieDetailsModel>.value(_FakeMovieDetailsModel_0(
          this,
          Invocation.method(
            #getMovieDetails,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.MovieDetailsModel>);
}

/// A class which mocks [MoviesCacheDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoviesCacheDataSource extends _i1.Mock
    implements _i6.MoviesCacheDataSource {
  MockMoviesCacheDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> saveMovieList(List<_i5.MovieModel>? movieList) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveMovieList,
          [movieList],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<List<_i5.MovieModel>> getMovieList() => (super.noSuchMethod(
        Invocation.method(
          #getMovieList,
          [],
        ),
        returnValue: _i4.Future<List<_i5.MovieModel>>.value(<_i5.MovieModel>[]),
      ) as _i4.Future<List<_i5.MovieModel>>);
  @override
  _i4.Future<void> saveMovieDetails(_i2.MovieDetailsModel? movieDetails) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveMovieDetails,
          [movieDetails],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<_i2.MovieDetailsModel> getMovieDetails(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieDetails,
          [id],
        ),
        returnValue:
            _i4.Future<_i2.MovieDetailsModel>.value(_FakeMovieDetailsModel_0(
          this,
          Invocation.method(
            #getMovieDetails,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.MovieDetailsModel>);
}
